/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// LoopParallelLoopFusion
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class LoopParallelLoopFusionBase : public ::mlir::OperationPass<> {
public:
  LoopParallelLoopFusionBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  LoopParallelLoopFusionBase(const LoopParallelLoopFusionBase &) : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  llvm::StringRef getArgument() const override { return "parallel-loop-fusion"; }

  /// Returns the derived pass name.
  llvm::StringRef getName() const override { return "LoopParallelLoopFusion"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
};

//===----------------------------------------------------------------------===//
// LoopParallelLoopSpecialization
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class LoopParallelLoopSpecializationBase : public ::mlir::FunctionPass {
public:
  LoopParallelLoopSpecializationBase() : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}
  LoopParallelLoopSpecializationBase(const LoopParallelLoopSpecializationBase &) : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  llvm::StringRef getArgument() const override { return "parallel-loop-specialization"; }

  /// Returns the derived pass name.
  llvm::StringRef getName() const override { return "LoopParallelLoopSpecialization"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
};

//===----------------------------------------------------------------------===//
// LoopParallelLoopTiling
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class LoopParallelLoopTilingBase : public ::mlir::FunctionPass {
public:
  LoopParallelLoopTilingBase() : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}
  LoopParallelLoopTilingBase(const LoopParallelLoopTilingBase &) : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  llvm::StringRef getArgument() const override { return "parallel-loop-tiling"; }

  /// Returns the derived pass name.
  llvm::StringRef getName() const override { return "LoopParallelLoopTiling"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
  Pass::ListOption<int64_t> tileSizes{*this, "parallel-loop-tile-sizes", llvm::cl::desc("Factors to tile parallel loops by"), llvm::cl::ZeroOrMore, llvm::cl::MiscFlags::CommaSeparated};
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION
#define GEN_PASS_REGISTRATION_LoopParallelLoopFusion
#define GEN_PASS_REGISTRATION_LoopParallelLoopSpecialization
#define GEN_PASS_REGISTRATION_LoopParallelLoopTiling
#endif // GEN_PASS_REGISTRATION
#ifdef GEN_PASS_REGISTRATION_LoopParallelLoopFusion
::mlir::registerPass("parallel-loop-fusion", "Fuse adjacent parallel loops", []() -> std::unique_ptr<Pass> { return mlir::createParallelLoopFusionPass(); });
#endif // GEN_PASS_REGISTRATION_LoopParallelLoopFusion
#undef GEN_PASS_REGISTRATION_LoopParallelLoopFusion
#ifdef GEN_PASS_REGISTRATION_LoopParallelLoopSpecialization
::mlir::registerPass("parallel-loop-specialization", "Specialize parallel loops for vectorization", []() -> std::unique_ptr<Pass> { return mlir::createParallelLoopSpecializationPass(); });
#endif // GEN_PASS_REGISTRATION_LoopParallelLoopSpecialization
#undef GEN_PASS_REGISTRATION_LoopParallelLoopSpecialization
#ifdef GEN_PASS_REGISTRATION_LoopParallelLoopTiling
::mlir::registerPass("parallel-loop-tiling", "Tile parallel loops", []() -> std::unique_ptr<Pass> { return mlir::createParallelLoopTilingPass(); });
#endif // GEN_PASS_REGISTRATION_LoopParallelLoopTiling
#undef GEN_PASS_REGISTRATION_LoopParallelLoopTiling
#ifdef GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION_LoopParallelLoopFusion
#undef GEN_PASS_REGISTRATION_LoopParallelLoopSpecialization
#undef GEN_PASS_REGISTRATION_LoopParallelLoopTiling
#endif // GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION
