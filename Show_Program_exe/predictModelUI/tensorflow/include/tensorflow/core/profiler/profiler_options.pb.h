// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/profiler/profiler_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto;
namespace tensorflow {
class ProfileOptions;
class ProfileOptionsDefaultTypeInternal;
extern ProfileOptionsDefaultTypeInternal _ProfileOptions_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::ProfileOptions* Arena::CreateMaybeMessage<::tensorflow::ProfileOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

enum ProfileOptions_DeviceType : int {
  ProfileOptions_DeviceType_UNSPECIFIED = 0,
  ProfileOptions_DeviceType_CPU = 1,
  ProfileOptions_DeviceType_GPU = 2,
  ProfileOptions_DeviceType_TPU = 3,
  ProfileOptions_DeviceType_ProfileOptions_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProfileOptions_DeviceType_ProfileOptions_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProfileOptions_DeviceType_IsValid(int value);
constexpr ProfileOptions_DeviceType ProfileOptions_DeviceType_DeviceType_MIN = ProfileOptions_DeviceType_UNSPECIFIED;
constexpr ProfileOptions_DeviceType ProfileOptions_DeviceType_DeviceType_MAX = ProfileOptions_DeviceType_TPU;
constexpr int ProfileOptions_DeviceType_DeviceType_ARRAYSIZE = ProfileOptions_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileOptions_DeviceType_descriptor();
template<typename T>
inline const std::string& ProfileOptions_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProfileOptions_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProfileOptions_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProfileOptions_DeviceType_descriptor(), enum_t_value);
}
inline bool ProfileOptions_DeviceType_Parse(
    const std::string& name, ProfileOptions_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProfileOptions_DeviceType>(
    ProfileOptions_DeviceType_descriptor(), name, value);
}
// ===================================================================

class ProfileOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.ProfileOptions) */ {
 public:
  ProfileOptions();
  virtual ~ProfileOptions();

  ProfileOptions(const ProfileOptions& from);
  ProfileOptions(ProfileOptions&& from) noexcept
    : ProfileOptions() {
    *this = ::std::move(from);
  }

  inline ProfileOptions& operator=(const ProfileOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileOptions& operator=(ProfileOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProfileOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfileOptions* internal_default_instance() {
    return reinterpret_cast<const ProfileOptions*>(
               &_ProfileOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfileOptions& a, ProfileOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ProfileOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProfileOptions* New() const final {
    return CreateMaybeMessage<ProfileOptions>(nullptr);
  }

  ProfileOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProfileOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProfileOptions& from);
  void MergeFrom(const ProfileOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfileOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.ProfileOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto);
    return ::descriptor_table_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProfileOptions_DeviceType DeviceType;
  static constexpr DeviceType UNSPECIFIED =
    ProfileOptions_DeviceType_UNSPECIFIED;
  static constexpr DeviceType CPU =
    ProfileOptions_DeviceType_CPU;
  static constexpr DeviceType GPU =
    ProfileOptions_DeviceType_GPU;
  static constexpr DeviceType TPU =
    ProfileOptions_DeviceType_TPU;
  static inline bool DeviceType_IsValid(int value) {
    return ProfileOptions_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    ProfileOptions_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    ProfileOptions_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    ProfileOptions_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return ProfileOptions_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return ProfileOptions_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(const std::string& name,
      DeviceType* value) {
    return ProfileOptions_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostTracerLevelFieldNumber = 2,
    kDeviceTracerLevelFieldNumber = 3,
    kPythonTracerLevelFieldNumber = 4,
    kIncludeDatasetOpsFieldNumber = 1,
    kEnableHloProtoFieldNumber = 7,
    kVersionFieldNumber = 5,
    kDeviceTypeFieldNumber = 6,
  };
  // uint32 host_tracer_level = 2;
  void clear_host_tracer_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_tracer_level() const;
  void set_host_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 device_tracer_level = 3;
  void clear_device_tracer_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 device_tracer_level() const;
  void set_device_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 python_tracer_level = 4;
  void clear_python_tracer_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 python_tracer_level() const;
  void set_python_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // bool include_dataset_ops = 1;
  void clear_include_dataset_ops();
  bool include_dataset_ops() const;
  void set_include_dataset_ops(bool value);

  // bool enable_hlo_proto = 7;
  void clear_enable_hlo_proto();
  bool enable_hlo_proto() const;
  void set_enable_hlo_proto(bool value);

  // uint32 version = 5;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  void clear_device_type();
  ::tensorflow::ProfileOptions_DeviceType device_type() const;
  void set_device_type(::tensorflow::ProfileOptions_DeviceType value);

  // @@protoc_insertion_point(class_scope:tensorflow.ProfileOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_tracer_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 device_tracer_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 python_tracer_level_;
  bool include_dataset_ops_;
  bool enable_hlo_proto_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int device_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfileOptions

// uint32 version = 5;
inline void ProfileOptions::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileOptions::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.version)
  return version_;
}
inline void ProfileOptions::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.version)
}

// .tensorflow.ProfileOptions.DeviceType device_type = 6;
inline void ProfileOptions::clear_device_type() {
  device_type_ = 0;
}
inline ::tensorflow::ProfileOptions_DeviceType ProfileOptions::device_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.device_type)
  return static_cast< ::tensorflow::ProfileOptions_DeviceType >(device_type_);
}
inline void ProfileOptions::set_device_type(::tensorflow::ProfileOptions_DeviceType value) {
  
  device_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.device_type)
}

// bool include_dataset_ops = 1;
inline void ProfileOptions::clear_include_dataset_ops() {
  include_dataset_ops_ = false;
}
inline bool ProfileOptions::include_dataset_ops() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.include_dataset_ops)
  return include_dataset_ops_;
}
inline void ProfileOptions::set_include_dataset_ops(bool value) {
  
  include_dataset_ops_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.include_dataset_ops)
}

// uint32 host_tracer_level = 2;
inline void ProfileOptions::clear_host_tracer_level() {
  host_tracer_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileOptions::host_tracer_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.host_tracer_level)
  return host_tracer_level_;
}
inline void ProfileOptions::set_host_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  host_tracer_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.host_tracer_level)
}

// uint32 device_tracer_level = 3;
inline void ProfileOptions::clear_device_tracer_level() {
  device_tracer_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileOptions::device_tracer_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.device_tracer_level)
  return device_tracer_level_;
}
inline void ProfileOptions::set_device_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  device_tracer_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.device_tracer_level)
}

// uint32 python_tracer_level = 4;
inline void ProfileOptions::clear_python_tracer_level() {
  python_tracer_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProfileOptions::python_tracer_level() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.python_tracer_level)
  return python_tracer_level_;
}
inline void ProfileOptions::set_python_tracer_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  python_tracer_level_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.python_tracer_level)
}

// bool enable_hlo_proto = 7;
inline void ProfileOptions::clear_enable_hlo_proto() {
  enable_hlo_proto_ = false;
}
inline bool ProfileOptions::enable_hlo_proto() const {
  // @@protoc_insertion_point(field_get:tensorflow.ProfileOptions.enable_hlo_proto)
  return enable_hlo_proto_;
}
inline void ProfileOptions::set_enable_hlo_proto(bool value) {
  
  enable_hlo_proto_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.ProfileOptions.enable_hlo_proto)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::ProfileOptions_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::ProfileOptions_DeviceType>() {
  return ::tensorflow::ProfileOptions_DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprofiler_2fprofiler_5foptions_2eproto
